// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        Mux16(a= instruction, b= tout, sel= instruction[15], out= o1);
        Not(in= instruction[15], out= n15);
        Or(a= instruction[5], b= n15, out= a);
        ARegister(in= o1, load= a, out= aout, out[0..14]=addressM);

        And(a= instruction[15], b= instruction[4], out= d);
        DRegister(in= tout, load= d, out= dout);
        Mux16(a= aout, b= inM, sel= instruction[12], out= o2);

        ALU(x= dout, y= o2, zx= instruction[11], nx= instruction[10], zy= instruction[9], 
            ny= instruction[8], f= instruction[7], no= instruction[6], out= outM, out=tout, 
            zr= izr, ng= ing);

        And(a= instruction[15], b= instruction[3], out= writeM);

        And(a= instruction[1], b= izr, out= tj1);
        And(a= instruction[2], b= ing, out= tj2);

        Or(a= izr, b= ing, out= tj4);
        Not(in= tj4, out= p);
        And(a= instruction[0], b= p, out= tj5);

        Or(a= tj1, b= tj2, out= tj3);
        Or(a= tj3, b= tj5, out= j);
        And(a= instruction[15], b= j, out= jp);
        
        PC(in= aout, load= jp, inc= true, reset= reset, out[0..14]= pc[0..14]);
}